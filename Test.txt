<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestione Attività</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <style>
        .modal-dialog {
            max-width: 400px;
        }
        #showAllTasksBtn {
            display: none;
        }
        .alert {
            display: none;
        }
        .sortable {
            cursor: pointer;
        }
        .sortable:after {
            content: " ⬍";
            font-size: 0.9em;
            color: gray;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Gestione Attività</h1>
        <div class="d-flex justify-content-between mb-3">
            <button class="btn btn-primary" id="addTaskBtn">Aggiungi Attività</button>
            <button class="btn btn-secondary" id="filterClosedBtn">Mostra/Nascondi Attività Chiuse</button>
            <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#filterNameModal">Filtra per Nome</button>
            <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#filterDateModal">Filtra per Data</button>
        </div>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col" class="sortable" data-column="name">Nome Attività</th>
                    <th scope="col" class="sortable" data-column="date">Data</th>
                    <th scope="col">Stato</th>
                    <th scope="col">Azioni</th>
                </tr>
            </thead>
            <tbody id="taskTableBody"></tbody>
        </table>
        <div class="text-center">
            <button class="btn btn-outline-primary mt-3" id="showAllTasksBtn">Mostra tutte le attività</button>
        </div>
    </div>

    <!-- Modale Filtra per Nome -->
    <div class="modal fade" id="filterNameModal" tabindex="-1" aria-labelledby="filterNameModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filterNameModalLabel">Filtra per Nome</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
                </div>
                <div class="modal-body">
                    <input type="text" id="filterNameInput" class="form-control" placeholder="Inserisci il nome...">
                    <div class="alert alert-danger mt-3" id="nameNotFoundAlert">Attività non trovata, prova con un altro nome.</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                    <button type="button" class="btn btn-primary" id="applyFilterName">Cerca Attività</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modale Filtra per Data -->
    <div class="modal fade" id="filterDateModal" tabindex="-1" aria-labelledby="filterDateModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filterDateModalLabel">Filtra per Data</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
                </div>
                <div class="modal-body">
                    <input type="date" id="filterDateInput" class="form-control">
                    <div class="alert alert-danger mt-3" id="dateNotFoundAlert">Attività non trovata, prova con un'altra data.</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                    <button type="button" class="btn btn-primary" id="applyFilterDate">Cerca Attività</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modale Aggiungi/Modifica Attività -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalLabel">Attività</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
                </div>
                <div class="modal-body">
                    <form id="taskForm">
                        <div class="mb-3">
                            <label for="taskName" class="form-label">Nome Attività</label>
                            <input type="text" class="form-control" id="taskName" required>
                        </div>
                        <div class="mb-3">
                            <label for="taskDate" class="form-label">Data</label>
                            <input type="date" class="form-control" id="taskDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="taskStatus" class="form-label">Stato</label>
                            <select class="form-select" id="taskStatus">
                                <option value="Aperta">Aperta</option>
                                <option value="Chiusa">Chiusa</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="button" class="btn btn-primary" id="saveTaskBtn">Salva</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let tasks = [
            { name: "Progetto 1", date: "2023-01-15", status: "Aperta" },
            { name: "Revisione Documento", date: "2023-01-10", status: "Chiusa" },
            { name: "Test Funzionalità", date: "2023-01-12", status: "Aperta" },
            { name: "Aggiornamento Sistema", date: "2023-01-05", status: "Chiusa" },
            { name: "Preparazione Report", date: "2023-01-18", status: "Aperta" }
        ];
        let isFilterClosed = false;
        let editingTaskIndex = null;
        let currentSort = { column: null, order: 'asc' };

        const taskTableBody = document.getElementById('taskTableBody');
        const addTaskBtn = document.getElementById('addTaskBtn');
        const saveTaskBtn = document.getElementById('saveTaskBtn');
        const applyFilterNameBtn = document.getElementById('applyFilterName');
        const applyFilterDateBtn = document.getElementById('applyFilterDate');
        const filterClosedBtn = document.getElementById('filterClosedBtn');
        const showAllTasksBtn = document.getElementById('showAllTasksBtn');
        const filterNameInput = document.getElementById('filterNameInput');
        const filterDateInput = document.getElementById('filterDateInput');
        const nameNotFoundAlert = document.getElementById('nameNotFoundAlert');
        const dateNotFoundAlert = document.getElementById('dateNotFoundAlert');
        const taskModal = new bootstrap.Modal(document.getElementById('taskModal'));

        function renderTasks(filteredTasks = tasks) {
            taskTableBody.innerHTML = '';
            filteredTasks.forEach((task, index) => {
                if (isFilterClosed && task.status === 'Chiusa') return;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${task.name}</td>
                    <td>${task.date}</td>
                    <td>${task.status}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editTask(${index})">Modifica</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteTask(${index})">Elimina</button>
                    </td>
                `;
                taskTableBody.appendChild(row);
            });
            showAllTasksBtn.style.display = filteredTasks.length < tasks.length ? 'block' : 'none';
        }

        function sortTasks(column) {
            const order = currentSort.column === column && currentSort.order === 'asc' ? 'desc' : 'asc';
            tasks.sort((a, b) => {
                let comparison = 0;
                if (column === 'name') {
                    comparison = a.name.localeCompare(b.name);
                } else if (column === 'date') {
                    comparison = new Date(a.date) - new Date(b.date);
                }
                return order === 'asc' ? comparison : -comparison;
            });
            currentSort = { column, order };
            renderTasks();
        }

        function addTask() {
            editingTaskIndex = null;
            document.getElementById('taskForm').reset();
            taskModal.show();
        }

        function editTask(index) {
            editingTaskIndex = index;
            const task = tasks[index];
            document.getElementById('taskName').value = task.name;
            document.getElementById('taskDate').value = task.date;
            document.getElementById('taskStatus').value = task.status;
            taskModal.show();
        }

        function saveTask() {
            const name = document.getElementById('taskName').value.trim();
            const date = document.getElementById('taskDate').value;
            const status = document.getElementById('taskStatus').value;
            if (!name || !date) {
                alert('Tutti i campi sono obbligatori.');
                return;
            }
            if (editingTaskIndex !== null) {
                tasks[editingTaskIndex] = { name, date, status };
            } else {
                tasks.push({ name, date, status });
            }
            taskModal.hide();
            renderTasks();
        }

        function deleteTask(index) {
            if (confirm('Sei sicuro di voler eliminare questa attività?')) {
                tasks.splice(index, 1);
                renderTasks();
            }
        }

        function filterByName() {
            const name = filterNameInput.value.toLowerCase();
            const filteredTasks = tasks.filter(task => task.name.toLowerCase().includes(name));
            if (filteredTasks.length === 0) {
                nameNotFoundAlert.style.display = 'block';
            } else {
                nameNotFoundAlert.style.display = 'none';
                renderTasks(filteredTasks);
            }
        }

        function filterByDate() {
            const date = filterDateInput.value;
            const filteredTasks = tasks.filter(task => task.date === date);
            if (filteredTasks.length === 0) {
                dateNotFoundAlert.style.display = 'block';
            } else {
                dateNotFoundAlert.style.display = 'none';
                renderTasks(filteredTasks);
            }
        }

        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => sortTasks(header.dataset.column));
        });

        addTaskBtn.addEventListener('click', addTask);
        saveTaskBtn.addEventListener('click', saveTask);
        applyFilterNameBtn.addEventListener('click', filterByName);
        applyFilterDateBtn.addEventListener('click', filterByDate);
        filterClosedBtn.addEventListener('click', () => {
            isFilterClosed = !isFilterClosed;
            renderTasks();
        });
        showAllTasksBtn.addEventListener('click', () => {
            nameNotFoundAlert.style.display = 'none';
            dateNotFoundAlert.style.display = 'none';
            isFilterClosed = false; // Mostra tutte le attività, incluse quelle chiuse
            renderTasks();
        });

        renderTasks();
    </script>
</body>
</html>
